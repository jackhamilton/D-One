
import enums.charClass;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.awt.Color;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jack
 */
public class CharacterBuilder extends javax.swing.JFrame {

    protected boolean npc = false;
    protected int id = -1;
    
    private int strInd = 0, dexInd = 1, conInd = 2, intInd = 3, wisInd = 4, chaInd = 5;
    /**
     * Creates new form CharacterBuilder
     */
    
    public static DefaultListModel langModel = new DefaultListModel();
    public CharacterBuilder() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        langList.setModel(langModel);
        langModel.removeAllElements();
        langModel.addElement("Common");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jDialog1 = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jLabel9 = new javax.swing.JLabel();
        jOptionPane1 = new javax.swing.JOptionPane();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        classSelect = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        race = new javax.swing.JComboBox<>();
        age = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        weight = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        eyes = new javax.swing.JComboBox<>();
        jButton12 = new javax.swing.JButton();
        hair = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        skin = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        intSpin = new javax.swing.JSpinner();
        strCombo = new javax.swing.JComboBox<>();
        chaMod = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        wisCombo = new javax.swing.JComboBox<>();
        wisSpin = new javax.swing.JSpinner();
        dexTemp = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        chaTemp = new javax.swing.JTextField();
        strMod = new javax.swing.JLabel();
        wisMod = new javax.swing.JLabel();
        strSpin = new javax.swing.JSpinner();
        dexSpin = new javax.swing.JSpinner();
        dexMod = new javax.swing.JLabel();
        intCombo = new javax.swing.JComboBox<>();
        conSpin = new javax.swing.JSpinner();
        chaSpin = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        conMod = new javax.swing.JLabel();
        conCombo = new javax.swing.JComboBox<>();
        chaCombo = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        conTemp = new javax.swing.JTextField();
        raceStr = new javax.swing.JTextField();
        wisTemp = new javax.swing.JTextField();
        intTemp = new javax.swing.JTextField();
        intMod = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        dexCombo = new javax.swing.JComboBox<>();
        strTemp1 = new javax.swing.JTextField();
        raceDex = new javax.swing.JTextField();
        raceCon = new javax.swing.JTextField();
        raceInt = new javax.swing.JTextField();
        raceWis = new javax.swing.JTextField();
        raceCha = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        alignLNC = new javax.swing.JComboBox<>();
        alignGNE = new javax.swing.JComboBox<>();
        jButton14 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        notes = new javax.swing.JTextPane();
        jLabel31 = new javax.swing.JLabel();
        group = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        langList = new javax.swing.JList<>();
        jLabel30 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        location = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        jButton4.setText("Save and Exit");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jLabel3.setText("jLabel3");

        jLabel5.setText("jLabel5");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jLabel9.setText("jLabel9");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Roll All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Save and Exit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jButton6.setText("Roll");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel2.setText("Class");

        classSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Barbarian", "Bard", "Cleric", "Druid", "Ranger", "Sorcerer", "Wizard", "Monk", "Paladin", "Rogue", "Fighter" }));
        classSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classSelectItemStateChanged(evt);
            }
        });

        jButton7.setText("Roll");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel4.setText("Race");

        jButton8.setText("Roll");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        race.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Human", "Elf", "Dwarf", "Gnome", "Halfling", "Half-Elf", "Half-Orc" }));
        race.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raceItemStateChanged(evt);
            }
        });
        race.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raceActionPerformed(evt);
            }
        });

        jLabel6.setText("Age");

        jButton9.setText("Roll");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel7.setText("Gender");

        male.setSelected(true);
        male.setText("Male");
        male.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                maleItemStateChanged(evt);
            }
        });

        female.setText("Female");
        female.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                femaleItemStateChanged(evt);
            }
        });

        jLabel8.setText("Weight");

        jButton10.setText("Roll");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel10.setText("Eyes");

        jButton11.setText("Roll");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        eyes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Orange", "Yellow", "Green", "Blue", "Purple", "Brown" }));

        jButton12.setText("Roll");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        hair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brown", "Black", "White", "Blonde", "Red", "Orange", "Yellow", "Green", "Blue", "Purple" }));

        jLabel11.setText("Hair");

        jButton13.setText("Roll");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        skin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "White", "Brown", "Black", "Other" }));

        jLabel12.setText("Skin");

        jLabel18.setText("Constitution");

        jLabel21.setText("Prioritize");

        strCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        strCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                strComboItemStateChanged(evt);
            }
        });

        chaMod.setText("+0");

        jLabel15.setText("Charisma");

        wisCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        wisCombo.setSelectedIndex(4);
        wisCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wisComboActionPerformed(evt);
            }
        });

        jLabel16.setText("Wisdom");

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Score");

        jLabel20.setText("Strength");

        strMod.setText("+0");

        wisMod.setText("+0");

        dexMod.setText("+0");

        intCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        intCombo.setSelectedIndex(3);
        intCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intComboActionPerformed(evt);
            }
        });

        jLabel17.setText("Intelligence");

        conMod.setText("+0");

        conCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        conCombo.setSelectedIndex(2);
        conCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conComboActionPerformed(evt);
            }
        });

        chaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        chaCombo.setSelectedIndex(5);
        chaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chaComboActionPerformed(evt);
            }
        });

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Temp");

        raceStr.setEditable(false);
        raceStr.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        intMod.setText("+0");

        jLabel19.setText("Dexterity");

        jButton15.setText("Reroll");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        dexCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        dexCombo.setSelectedIndex(1);
        dexCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dexComboItemStateChanged(evt);
            }
        });

        raceDex.setEditable(false);
        raceDex.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        raceCon.setEditable(false);
        raceCon.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        raceInt.setEditable(false);
        raceInt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        raceWis.setEditable(false);
        raceWis.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        raceCha.setEditable(false);
        raceCha.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Race");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(chaSpin)
                                    .addComponent(wisSpin)
                                    .addComponent(intSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(intMod, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chaMod, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(wisMod)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(conSpin)
                                    .addComponent(dexSpin)
                                    .addComponent(strSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(conMod)
                                    .addComponent(dexMod)
                                    .addComponent(strMod, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(raceStr)
                            .addComponent(raceCon, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(raceWis)
                            .addComponent(raceInt)
                            .addComponent(raceCha)
                            .addComponent(raceDex)
                            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(intTemp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(strTemp1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dexTemp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(conTemp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wisTemp, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chaTemp, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(strCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dexCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(conCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(intCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wisCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chaCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel21)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(raceStr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strMod)
                    .addComponent(strCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(strSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(strTemp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dexTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dexCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dexMod)
                    .addComponent(dexSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(raceDex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conMod)
                    .addComponent(conCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(raceCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intMod)
                    .addComponent(intCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(intSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(raceInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wisTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wisMod)
                    .addComponent(wisCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wisSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(raceWis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chaTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chaMod)
                    .addComponent(chaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chaSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(raceCha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel13.setText("Align");

        alignLNC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lawful", "Neutral", "Chaotic" }));

        alignGNE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Good", "Neutral", "Evil" }));

        jButton14.setText("Roll");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(notes);

        jLabel31.setText("Group");

        langList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Common" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        langList.setToolTipText("");
        jScrollPane2.setViewportView(langList);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Languages");

        jButton16.setText("Add");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Remove");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton17)
                .addContainerGap())
        );

        jLabel32.setText("Location");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addGap(23, 23, 23)
                                .addComponent(group, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(alignLNC, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(alignGNE, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(name)
                                        .addComponent(classSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(race, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton6)
                                        .addComponent(jButton7)
                                        .addComponent(jButton8)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton9)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel7))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton10)))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(female, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(male, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(hair, 0, 181, Short.MAX_VALUE)
                                    .addComponent(eyes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(skin, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(classSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(race, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton8)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton9)
                                    .addComponent(jLabel7)
                                    .addComponent(male)
                                    .addComponent(jLabel6))
                                .addGap(10, 10, 10)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10)
                            .addComponent(female))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(eyes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton11))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(hair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(skin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(alignLNC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alignGNE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton13)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(group, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32)
                            .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane4.addTab("Character", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Inventory", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Modifiers", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 635, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("Additional Information", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jTabbedPane4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Character newChar = genChar();
        if (id != -1) {
            for (int x = 0; x < Main.characters.size(); x++) {
                if (Main.characters.get(x).id == id) {
                    newChar.id = id;
                    Main.characters.remove(x);
                    Main.characters.add(newChar);
                }
            }
        } else {
            Main.characters.add(newChar);
        }
        display.reloadCharList();
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void femaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_femaleItemStateChanged
        if (female.isSelected()) {
            male.setSelected(false);
        } else {
            male.setSelected(true);
        }
    }//GEN-LAST:event_femaleItemStateChanged

    private void maleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_maleItemStateChanged
        if (male.isSelected()) {
            female.setSelected(false);
        } else {
            female.setSelected(true);
        }
    }//GEN-LAST:event_maleItemStateChanged

    private void raceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_raceActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Random r = new Random();
        classSelect.setSelectedIndex(genRandClass(enums.race.getRace(race.getSelectedIndex())).id);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Random r = new Random();
        race.setSelectedIndex(r.nextInt(7));
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        Random r = new Random();
        eyes.setSelectedIndex(genRandEyes(enums.race.getRace(race.getSelectedIndex())));
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        Random r = new Random();
        hair.setSelectedIndex(genRandHair());
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        Random r = new Random();
        skin.setSelectedIndex(genRandSkin(enums.race.getRace(race.getSelectedIndex())));
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        enums.charClass cls = enums.charClass.getClass(classSelect.getSelectedIndex());
        int gneAlign = genRandGNE(cls);
        int lncAlign = 1;
        if (cls == cls.DRUID) {
            if (gneAlign == 1) {
                lncAlign = genRandLNC(cls);
            }
        } else {
            lncAlign = genRandLNC(cls);
        }
        alignGNE.setSelectedIndex(gneAlign);
        alignLNC.setSelectedIndex(lncAlign);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Character newChar = genChar();
        age.setText(""+genRandAge(newChar.race, newChar.charClass));
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Character newChar = genChar();
        weight.setText(""+genRandWeight(newChar.race, newChar.gender));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        randomize();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        name.setText(genRandName(enums.race.getRace(race.getSelectedIndex()), male.isSelected()));
    }//GEN-LAST:event_jButton6ActionPerformed

    private void raceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raceItemStateChanged
        Character newChar = genChar();
        switch(newChar.race) {
            case HUMAN:
                raceStr.setText("");
                raceDex.setText("");
                raceCon.setText("");
                raceInt.setText("");
                raceCha.setText("");
                break;
            case DWARF:
                raceStr.setText("");
                raceDex.setText("");
                raceCon.setText("+2");
                raceInt.setText("");
                raceCha.setText("-2");
                break;   
            case ELF:
                raceStr.setText("");
                raceDex.setText("+2");
                raceCon.setText("-2");
                raceInt.setText("");
                raceCha.setText("");
                break;
            case GNOME:
                raceStr.setText("-2");
                raceDex.setText("");
                raceCon.setText("+2");
                raceInt.setText("");
                raceCha.setText("");
                break;
            case HALFELF:
                raceStr.setText("");
                raceDex.setText("");
                raceCon.setText("");
                raceInt.setText("");
                raceCha.setText("");
                break;
            case HALFORC:
                raceStr.setText("+2");
                raceDex.setText("");
                raceCon.setText("");
                raceInt.setText("-2");
                raceCha.setText("-2");
                break;
            case HALFLING:
                raceStr.setText("-2");
                raceDex.setText("+2");
                raceCon.setText("");
                raceInt.setText("");
                raceCha.setText("");
                break;             
        }
        calcRollBonus();
    }//GEN-LAST:event_raceItemStateChanged

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        addLanguage temp = new addLanguage();
        temp.setVisible(true);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        rollStats();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void strComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_strComboItemStateChanged
        if (dexCombo.getSelectedIndex() == strCombo.getSelectedIndex()) {
            dexCombo.setSelectedIndex(strInd);
            dexInd = strInd;
            strInd = strCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (intCombo.getSelectedIndex() == strCombo.getSelectedIndex()) {
            intCombo.setSelectedIndex(strInd);
            intInd = strInd;
            strInd = strCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (wisCombo.getSelectedIndex() == strCombo.getSelectedIndex()) {
            wisCombo.setSelectedIndex(strInd);
            wisInd = strInd;
            strInd = strCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (conCombo.getSelectedIndex() == strCombo.getSelectedIndex()) {
            conCombo.setSelectedIndex(strInd);
            conInd = strInd;
            strInd = strCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (chaCombo.getSelectedIndex() == strCombo.getSelectedIndex()) {
            chaCombo.setSelectedIndex(strInd);
            chaInd = strInd;
            strInd = strCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_strComboItemStateChanged

    private void dexComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dexComboItemStateChanged
        if (strCombo.getSelectedIndex() == dexCombo.getSelectedIndex()) {
            strCombo.setSelectedIndex(dexInd);
            strInd = dexInd;
            dexInd = dexCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (intCombo.getSelectedIndex() == dexCombo.getSelectedIndex()) {
            intCombo.setSelectedIndex(dexInd);
            intInd = dexInd;
            dexInd = dexCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(intSpin.getValue());
            intSpin.setValue(spinVal);
        }if (wisCombo.getSelectedIndex() == dexCombo.getSelectedIndex()) {
            wisCombo.setSelectedIndex(dexInd);
            wisInd = dexInd;
            dexInd = dexCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(wisSpin.getValue());
            wisSpin.setValue(spinVal);
        }if (conCombo.getSelectedIndex() == dexCombo.getSelectedIndex()) {
            conCombo.setSelectedIndex(dexInd);
            conInd = dexInd;
            dexInd = dexCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(conSpin.getValue());
            conSpin.setValue(spinVal);
        }if (chaCombo.getSelectedIndex() == dexCombo.getSelectedIndex()) {
            chaCombo.setSelectedIndex(dexInd);
            chaInd = dexInd;
            dexInd = dexCombo.getSelectedIndex();
            int spinVal = (int)dexSpin.getValue();
            dexSpin.setValue(chaSpin.getValue());
            chaSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_dexComboItemStateChanged

    private void conComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conComboActionPerformed
        if (strCombo.getSelectedIndex() == conCombo.getSelectedIndex()) {
            strCombo.setSelectedIndex(conInd);
            strInd = conInd;
            conInd = conCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (intCombo.getSelectedIndex() == conCombo.getSelectedIndex()) {
            intCombo.setSelectedIndex(conInd);
            intInd = conInd;
            conInd = conCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(intSpin.getValue());
            intSpin.setValue(spinVal);
        }if (wisCombo.getSelectedIndex() == conCombo.getSelectedIndex()) {
            wisCombo.setSelectedIndex(conInd);
            wisInd = conInd;
            conInd = conCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(wisSpin.getValue());
            wisSpin.setValue(spinVal);
        }if (dexCombo.getSelectedIndex() == conCombo.getSelectedIndex()) {
            dexCombo.setSelectedIndex(conInd);
            dexInd = conInd;
            conInd = conCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(dexSpin.getValue());
            dexSpin.setValue(spinVal);
        }if (chaCombo.getSelectedIndex() == conCombo.getSelectedIndex()) {
            chaCombo.setSelectedIndex(conInd);
            chaInd = conInd;
            conInd = conCombo.getSelectedIndex();
            int spinVal = (int)conSpin.getValue();
            conSpin.setValue(chaSpin.getValue());
            chaSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_conComboActionPerformed

    private void intComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intComboActionPerformed
        if (strCombo.getSelectedIndex() == intCombo.getSelectedIndex()) {
            strCombo.setSelectedIndex(intInd);
            strInd = intInd;
            intInd = intCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (dexCombo.getSelectedIndex() == intCombo.getSelectedIndex()) {
            dexCombo.setSelectedIndex(intInd);
            dexInd = intInd;
            intInd = intCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(dexSpin.getValue());
            dexSpin.setValue(spinVal);
        }if (wisCombo.getSelectedIndex() == intCombo.getSelectedIndex()) {
            wisCombo.setSelectedIndex(intInd);
            wisInd = intInd;
            intInd = intCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(wisSpin.getValue());
            wisSpin.setValue(spinVal);
        }if (conCombo.getSelectedIndex() == intCombo.getSelectedIndex()) {
            conCombo.setSelectedIndex(intInd);
            conInd = intInd;
            intInd = intCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(conSpin.getValue());
            conSpin.setValue(spinVal);
        }if (chaCombo.getSelectedIndex() == intCombo.getSelectedIndex()) {
            chaCombo.setSelectedIndex(intInd);
            chaInd = intInd;
            intInd = intCombo.getSelectedIndex();
            int spinVal = (int)intSpin.getValue();
            intSpin.setValue(chaSpin.getValue());
            chaSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_intComboActionPerformed

    private void wisComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wisComboActionPerformed
        if (strCombo.getSelectedIndex() == wisCombo.getSelectedIndex()) {
            strCombo.setSelectedIndex(wisInd);
            strInd = wisInd;
            wisInd = wisCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (intCombo.getSelectedIndex() == wisCombo.getSelectedIndex()) {
            intCombo.setSelectedIndex(wisInd);
            intInd = wisInd;
            wisInd = wisCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(intSpin.getValue());
            intSpin.setValue(spinVal);
        }if (dexCombo.getSelectedIndex() == wisCombo.getSelectedIndex()) {
            dexCombo.setSelectedIndex(wisInd);
            dexInd = wisInd;
            wisInd = wisCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(dexSpin.getValue());
            dexSpin.setValue(spinVal);
        }if (conCombo.getSelectedIndex() == wisCombo.getSelectedIndex()) {
            conCombo.setSelectedIndex(wisInd);
            conInd = wisInd;
            wisInd = wisCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(conSpin.getValue());
            conSpin.setValue(spinVal);
        }if (chaCombo.getSelectedIndex() == wisCombo.getSelectedIndex()) {
            chaCombo.setSelectedIndex(wisInd);
            chaInd = wisInd;
            wisInd = wisCombo.getSelectedIndex();
            int spinVal = (int)wisSpin.getValue();
            wisSpin.setValue(chaSpin.getValue());
            chaSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_wisComboActionPerformed

    private void chaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chaComboActionPerformed
        if (strCombo.getSelectedIndex() == chaCombo.getSelectedIndex()) {
            strCombo.setSelectedIndex(chaInd);
            strInd = chaInd;
            chaInd = chaCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(strSpin.getValue());
            strSpin.setValue(spinVal);
        }if (intCombo.getSelectedIndex() == chaCombo.getSelectedIndex()) {
            intCombo.setSelectedIndex(chaInd);
            intInd = chaInd;
            chaInd = chaCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(intSpin.getValue());
            intSpin.setValue(spinVal);
        }if (wisCombo.getSelectedIndex() == chaCombo.getSelectedIndex()) {
            wisCombo.setSelectedIndex(chaInd);
            wisInd = chaInd;
            chaInd = chaCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(wisSpin.getValue());
            wisSpin.setValue(spinVal);
        }if (conCombo.getSelectedIndex() == chaCombo.getSelectedIndex()) {
            conCombo.setSelectedIndex(chaInd);
            conInd = chaInd;
            chaInd = chaCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(conSpin.getValue());
            conSpin.setValue(spinVal);
        }if (dexCombo.getSelectedIndex() == chaCombo.getSelectedIndex()) {
            dexCombo.setSelectedIndex(chaInd);
            dexInd = chaInd;
            chaInd = chaCombo.getSelectedIndex();
            int spinVal = (int)chaSpin.getValue();
            chaSpin.setValue(dexSpin.getValue());
            dexSpin.setValue(spinVal);
        }
        calcRollBonus();
    }//GEN-LAST:event_chaComboActionPerformed

    private void classSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classSelectItemStateChanged
        strCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).strp - 1);                                             
        conCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).conp - 1);                                             
        intCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).intp - 1);                                             
        wisCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).wisp - 1);                                             
        chaCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).chap - 1);                                             
        dexCombo.setSelectedIndex(enums.charClass.getClass(classSelect.getSelectedIndex()).dexp - 1);
    }//GEN-LAST:event_classSelectItemStateChanged

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (!langModel.isEmpty() && langList.getSelectedIndex() > -1) {
            langModel.removeElementAt(langList.getSelectedIndex());
            if (!langModel.isEmpty()) {langList.setSelectedIndex(0);}
        }
    }//GEN-LAST:event_jButton17ActionPerformed
    
    public void rollStats() {
        Random r = new Random();
        List<Integer> rolls = new ArrayList();
        while (rolls.size() < 6) {
            List<Integer> tempRolls = new ArrayList();
            tempRolls.add(r.nextInt(6) + 1);
            tempRolls.add(r.nextInt(6) + 1);
            tempRolls.add(r.nextInt(6) + 1);
            tempRolls.add(r.nextInt(6) + 1);
            tempRolls.sort(null);
            rolls.add(tempRolls.get(1) + tempRolls.get(2) + tempRolls.get(3));
        }
        rolls.sort(null);
        for (int x = 0; x < 6; x++) {
            if (strCombo.getSelectedIndex() == x) {
                strSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
            if (conCombo.getSelectedIndex() == x) {
                conSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
            if (chaCombo.getSelectedIndex() == x) {
                chaSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
            if (intCombo.getSelectedIndex() == x) {
                intSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
            if (wisCombo.getSelectedIndex() == x) {
                wisSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
            if (dexCombo.getSelectedIndex() == x) {
                dexSpin.setValue(rolls.get(rolls.size()-1));
                rolls.remove(rolls.size()-1);
            }
        }
        calcRollBonus();
    }
    
    public void calcRollBonus() {
        Character newChar = genChar();
        if ((newChar.str - 10) / 2 > -1) {
           strMod.setText("+"+(newChar.str - 10) / 2);
        } else {
           strMod.setText(""+(newChar.str - 10) / 2);            
        }
        if ((newChar.con - 10) / 2 > -1) {
           conMod.setText("+"+(newChar.con - 10) / 2);
        } else {
           conMod.setText(""+(newChar.con - 10) / 2);            
        }
        if ((newChar.intg - 10) / 2 > -1) {
           intMod.setText("+"+(newChar.intg - 10) / 2);
        } else {
           intMod.setText(""+(newChar.intg - 10) / 2);            
        }
        if ((newChar.cha - 10) / 2 > -1) {
           chaMod.setText("+"+(newChar.cha - 10) / 2);
        } else {
           chaMod.setText(""+(newChar.cha - 10) / 2);            
        }
        if ((newChar.wis - 10) / 2 > -1) {
           wisMod.setText("+"+(newChar.wis - 10) / 2);
        } else {
           wisMod.setText(""+(newChar.wis - 10) / 2);            
        }
        if ((newChar.dex - 10) / 2 > -1) {
           dexMod.setText("+"+(newChar.dex - 10) / 2);
        } else {
           dexMod.setText(""+(newChar.dex - 10) / 2);            
        }
    }
    
    public void randomize() {
        Random r = new Random();
        int raceID = r.nextInt(7);
        race.setSelectedIndex(raceID);
        if (r.nextBoolean()) {
            female.setSelected(true);
            male.setSelected(false);
        } else {
            female.setSelected(false);
            male.setSelected(true);            
        }
        enums.charClass cls = genRandClass(enums.race.getRace(raceID));
        classSelect.setSelectedIndex(cls.id);
        eyes.setSelectedIndex(genRandEyes(enums.race.getRace(raceID)));
        hair.setSelectedIndex(genRandHair());
        skin.setSelectedIndex(genRandSkin(enums.race.getRace(raceID)));
        int gneAlign = genRandGNE(cls);
        int lncAlign = 1;
        if (cls == cls.DRUID) {
            if (gneAlign == 1) {
                lncAlign = genRandLNC(cls);
            }
        } else {
            lncAlign = genRandLNC(cls);
        }
        alignGNE.setSelectedIndex(gneAlign);
        alignLNC.setSelectedIndex(lncAlign);
        name.setText(genRandName(enums.race.getRace(raceID), male.isSelected()));
        Character newChar = genChar();
        age.setText(""+genRandAge(newChar.race, newChar.charClass));
        weight.setText(""+genRandWeight(newChar.race, newChar.gender));
        rollStats();
    }
    
    public Character genChar() {
        Character newChar = new Character();
        newChar.name = this.name.getText();
        newChar.player = !npc;
        newChar.gender = male.isSelected();
        newChar.alignment = "" + alignLNC.getSelectedItem().toString().substring(0, 1) + alignGNE.getSelectedItem().toString().substring(0, 1);
        String ages = age.getText(), weit = weight.getText();
        try {
        if (ages != null && !ages.isEmpty()) {
            newChar.age = Integer.parseInt(ages);
        }
        if (weit != null && !ages.isEmpty()) {
            newChar.weight = Integer.parseInt(weit);
        }
        } catch (Exception e) {}
        newChar.group = group.getText();
        newChar.location = location.getText();
        for (int x = 0; x < langList.getModel().getSize(); x++) {
            newChar.languages.add(langList.getModel().getElementAt(x));
        }
        newChar.notes = notes.getText();
        switch (classSelect.getSelectedIndex()) {
            case 0:
                newChar.charClass = charClass.BARBARIAN;
                break;
            case 1:
                newChar.charClass = charClass.BARD;
                break;
            case 2:
                newChar.charClass = charClass.CLERIC;
                break;
            case 3:
                newChar.charClass = charClass.DRUID;
                break;
            case 4:
                newChar.charClass = charClass.RANGER;
                break;
            case 5:
                newChar.charClass = charClass.SORCERER;
                break;
            case 6:
                newChar.charClass = charClass.SORCERER;
                break;
            case 7:
                newChar.charClass = charClass.MONK;
                break;
            case 8:
                newChar.charClass = charClass.PALADIN;
                break;
            case 9:
                newChar.charClass = charClass.ROGUE;
                break;
        }
        switch (race.getSelectedIndex()) {
            case 0:
                newChar.race = enums.race.HUMAN;
                break;
            case 1:
                newChar.race = enums.race.ELF;
                break;
            case 2:
                newChar.race = enums.race.DWARF;
                break;
            case 3:
                newChar.race = enums.race.GNOME;
                break;
            case 4:
                newChar.race = enums.race.HALFLING;
                break;
            case 5:
                newChar.race = enums.race.HALFELF;
                break;
            case 6:
                newChar.race = enums.race.HALFORC;
                break;
        }
        switch(hair.getSelectedIndex()) {
            case 0:
                newChar.hair = Color.gray;
                break;
            case 1:
                newChar.hair = Color.BLACK;
                break;
            case 2:
                newChar.hair = Color.WHITE;
                break;
            case 3:
                newChar.hair = Color.YELLOW;
                break;
            case 4:
                newChar.hair = Color.RED;
                break;
            case 5:
                newChar.hair = Color.ORANGE;
                break;
            case 6:
                newChar.hair = Color.GREEN;
                break;
            case 7:
                newChar.hair = Color.BLUE;
                break;
            case 8:
                newChar.hair = Color.magenta;
                break;
        }
         switch(eyes.getSelectedIndex()) {
            case 0:
                newChar.eyes = Color.RED;
                break;
            case 1:
                newChar.eyes = Color.ORANGE;
                break;
            case 2:
                newChar.eyes = Color.YELLOW;
                break;
            case 3:
                newChar.eyes = Color.GREEN;
                break;
            case 4:
                newChar.eyes = Color.BLUE;
                break;
            case 5:
                newChar.eyes = Color.magenta;
                break;
            case 6:
                newChar.eyes = Color.gray;
                break;
        }
          switch(skin.getSelectedIndex()) {
            case 0:
                newChar.skin = Color.WHITE;
                break;
            case 1:
                newChar.skin = Color.gray;
                break;
            case 2:
                newChar.skin = Color.BLACK;
                break;
            case 3:
                newChar.skin = Color.BLUE;
                break;
        }
        newChar.str = (int)strSpin.getValue() + newChar.race.strMod;
        newChar.dex = (int)dexSpin.getValue() + newChar.race.dexMod;
        newChar.con = (int)conSpin.getValue() + newChar.race.conMod;
        newChar.intg = (int)intSpin.getValue() + newChar.race.intMod;
        newChar.wis = (int)wisSpin.getValue() + newChar.race.wisMod;
        newChar.cha = (int)chaSpin.getValue() + newChar.race.chaMod;  
        return newChar;
    }
    
    public String genRandName(enums.race r, boolean male) {
        String s1 = "Normal male:", s2 = "Normal female:", s3 = "Normal last:";
        if (r == enums.race.ELF) {
            s1 = "Elf male:";
            s2 = "Elf female:";
            s3 = "Elf last:";
        }
        if (r == enums.race.DWARF) {
            s1 = "Dwarf male:";
            s2 = "Dwarf female:";
            s3 = "Dwarf last:";
        }
        if (r == enums.race.HALFELF) {
            s3 = "Elf last:";
        }
        String Search1 = s1;
        String Search2 = s3;
        String ret = "";
        if (!male) {
            Search1 = s2;
        }
        InputStream in = getClass().getResourceAsStream("names.txt");
        try {
            Reader fr = new InputStreamReader(in, "utf-8");
            BufferedReader reader = new BufferedReader(fr);
            while (!reader.readLine().equals(Search1)) {}
            String found = reader.readLine();
            List<String> items = Arrays.asList(found.split("\\s*,\\s*"));
            Random rand = new Random();
            ret += items.get(rand.nextInt(items.size())) + " ";
            while (!reader.readLine().equals(Search2)) {}
            found = reader.readLine();
            items = Arrays.asList(found.split("\\s*,\\s*"));
            ret += items.get(rand.nextInt(items.size()));
        } catch (Exception e) {
            System.out.println("Unsupported encoding.");
        }
        return ret;
    }
    
    public int genRandAge(enums.race r, enums.charClass c) {
        int min = 0;
        int max = 0;
        int maybeOld = 0;
        switch(r) {
            case HUMAN:
                min = 14;
                max = 45;
                maybeOld = 65;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 17;
                    max = 95;
                }
                break;
            case DWARF:
                min = 16;
                max = 150;
                maybeOld = 350;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 23;
                    maybeOld = 450;
                }
                break;
            case ELF:
                min = 40;
                max = 200;
                maybeOld = 650;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 55;
                    maybeOld = 750;
                }
                break;
            case GNOME:
                min = 16;
                max = 120;
                maybeOld = 350;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 20;
                    maybeOld = 500;
                }
                break;
            case HALFELF:
                min = 14;
                max = 80;
                maybeOld = 150;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 22;
                    maybeOld = 180;
                }
                break;
            case HALFORC:
                min = 10;
                max = 40;
                maybeOld = 70;
                break;
            case HALFLING:
                min = 15;
                max = 80;
                maybeOld = 120;
                if (c == enums.charClass.SORCERER || c == enums.charClass.WIZARD) {
                    min = 17;
                    maybeOld = 150;
                }
                break;                
        }
        Random rand = new Random();
        if (rand.nextInt(10) < 3) {
            return rand.nextInt(maybeOld - min) + min;
        } else {
            return rand.nextInt(max - min) + min;
        }
    }
    
    public int genRandWeight(enums.race r, boolean male) {
        int min = 0;
        int max = 0;
        switch(r) {
            case HUMAN:
                min = 125;
                max = 250;
                if (!male) {
                    min -= 25;
                    max -= 50;
                }
                break;
            case DWARF:
                min = 95;
                max = 200;
                break;
            case ELF:
                min = 95;
                max = 135;
                break;
            case GNOME:
                min = 35;
                max = 40;
                break;
            case HALFELF:
                min = 100;
                max = 180;
                if (!male) {
                    min -= 15;
                    max -= 20;
                }
                break;
            case HALFORC:
                min = 180;
                max = 250;
                break;
            case HALFLING:
                min = 30;
                max = 35;
                break;    
            default:
                min = 100;
                max = 200;
                break;
        }
        Random rand = new Random();
        return rand.nextInt(max - min) + min;
    }
    
    public enums.charClass genRandClass(enums.race r) {
        Random rand = new Random();
        List<enums.charClass> normal = new ArrayList();
        List<enums.charClass> rare = new ArrayList();
        switch (r) {
            case HUMAN:
                normal.add(enums.charClass.BARBARIAN);
                normal.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                normal.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                normal.add(enums.charClass.MONK);
                normal.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                normal.add(enums.charClass.WIZARD);
                break;
            case HALFELF:
                rare.add(enums.charClass.BARBARIAN);
                normal.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                rare.add(enums.charClass.FIGHTER);
                normal.add(enums.charClass.MONK);
                normal.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                normal.add(enums.charClass.WIZARD);
                break;
            case ELF:
                rare.add(enums.charClass.BARBARIAN);
                normal.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                normal.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                normal.add(enums.charClass.MONK);
                rare.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                normal.add(enums.charClass.WIZARD);
                break;
            case GNOME:
                rare.add(enums.charClass.BARBARIAN);
                normal.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                normal.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                rare.add(enums.charClass.MONK);
                rare.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                normal.add(enums.charClass.WIZARD);
                break;
            case HALFLING:
                rare.add(enums.charClass.BARBARIAN);
                rare.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                rare.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                rare.add(enums.charClass.MONK);
                rare.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                rare.add(enums.charClass.WIZARD);
                break;
            case HALFORC:
                normal.add(enums.charClass.BARBARIAN);
                rare.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                rare.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                normal.add(enums.charClass.MONK);
                rare.add(enums.charClass.PALADIN);
                normal.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                rare.add(enums.charClass.WIZARD);
                break;
            case DWARF:
                rare.add(enums.charClass.BARBARIAN);
                rare.add(enums.charClass.BARD);
                normal.add(enums.charClass.CLERIC);
                rare.add(enums.charClass.DRUID);
                normal.add(enums.charClass.FIGHTER);
                rare.add(enums.charClass.MONK);
                normal.add(enums.charClass.PALADIN);
                rare.add(enums.charClass.RANGER);
                normal.add(enums.charClass.ROGUE);
                normal.add(enums.charClass.SORCERER);
                rare.add(enums.charClass.WIZARD);
                break;
        }
        if (rand.nextInt(10) == 0 && !rare.isEmpty()) {
            return rare.get(rand.nextInt(rare.size()));
        } else {
            enums.charClass cls = normal.get(rand.nextInt(normal.size()));
            return cls;
        }
    }
    
    public int genRandHair() {
        Random r = new Random();
        if (r.nextInt(6) == 0) {
            return r.nextInt(6) + 4;
        } else {
            return r.nextInt(4);
        }
    }
    
    public int genRandSkin(enums.race r) {
        Random rand = new Random();
        switch (r) {
            case HUMAN:
            case HALFLING:
                return rand.nextInt(3);
            case HALFORC:
                return rand.nextInt(3)+1;
            default:
                return rand.nextInt(2);
        }
    }
    
    public int genRandEyes(enums.race r) {
        Random rand = new Random();
        switch (r) {
            case ELF:
            case HALFELF:
                int ret = rand.nextInt(6)+1;
                return ret;
            case HALFORC:
                return rand.nextInt(3);
            default:
                int ret2 = rand.nextInt(3)+3;
                if (ret2 == 5) return 6;
                return ret2;
        }  
    }
    
    public int genRandLNC(enums.charClass c) {
        int align = 0;
        Random r = new Random();
        switch (c) {
            case BARBARIAN:
            case BARD:
                align = r.nextInt(2) + 1;
                break;
            case MONK:
            case PALADIN:
                align = 0;
                break;
            default:
                align = r.nextInt(3);
                break;
        }
        return align;
    }
    
    public int genRandGNE(enums.charClass c) {
        int align = 0;
        Random r = new Random();
        switch (c) {
            case PALADIN:
                align = 0;
                break;
            default:
                align = r.nextInt(3);
                break;
        }
        return align;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CharacterBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CharacterBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CharacterBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CharacterBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CharacterBuilder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField age;
    public javax.swing.JComboBox<String> alignGNE;
    public javax.swing.JComboBox<String> alignLNC;
    private javax.swing.JComboBox<String> chaCombo;
    public javax.swing.JLabel chaMod;
    public javax.swing.JSpinner chaSpin;
    public javax.swing.JTextField chaTemp;
    public javax.swing.JComboBox<String> classSelect;
    private javax.swing.JComboBox<String> conCombo;
    public javax.swing.JLabel conMod;
    public javax.swing.JSpinner conSpin;
    public javax.swing.JTextField conTemp;
    private javax.swing.JComboBox<String> dexCombo;
    public javax.swing.JLabel dexMod;
    public javax.swing.JSpinner dexSpin;
    public javax.swing.JTextField dexTemp;
    public javax.swing.JComboBox<String> eyes;
    public javax.swing.JRadioButton female;
    public javax.swing.JTextField group;
    public javax.swing.JComboBox<String> hair;
    private javax.swing.JComboBox<String> intCombo;
    public javax.swing.JLabel intMod;
    public javax.swing.JSpinner intSpin;
    public javax.swing.JTextField intTemp;
    private javax.swing.JButton jButton1;
    public javax.swing.JButton jButton10;
    public javax.swing.JButton jButton11;
    public javax.swing.JButton jButton12;
    public javax.swing.JButton jButton13;
    public javax.swing.JButton jButton14;
    public javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    public javax.swing.JButton jButton6;
    public javax.swing.JButton jButton7;
    public javax.swing.JButton jButton8;
    public javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    public javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    public javax.swing.JLabel jLabel31;
    public javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    public javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    public javax.swing.JList<String> langList;
    public javax.swing.JTextField location;
    public javax.swing.JRadioButton male;
    public javax.swing.JTextField name;
    public javax.swing.JTextPane notes;
    public javax.swing.JComboBox<String> race;
    public javax.swing.JTextField raceCha;
    public javax.swing.JTextField raceCon;
    public javax.swing.JTextField raceDex;
    public javax.swing.JTextField raceInt;
    public javax.swing.JTextField raceStr;
    public javax.swing.JTextField raceWis;
    public javax.swing.JComboBox<String> skin;
    private javax.swing.JComboBox<String> strCombo;
    public javax.swing.JLabel strMod;
    public javax.swing.JSpinner strSpin;
    public javax.swing.JTextField strTemp1;
    public javax.swing.JTextField weight;
    private javax.swing.JComboBox<String> wisCombo;
    public javax.swing.JLabel wisMod;
    public javax.swing.JSpinner wisSpin;
    public javax.swing.JTextField wisTemp;
    // End of variables declaration//GEN-END:variables
}
